{"ast":null,"code":"import { CognitoUser, CognitoUserAttribute, AuthenticationDetails } from 'amazon-cognito-identity-js';\nimport userPool from '../aws-config';\n\n// ‚úÖ Use environment variable for backend URL\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5001';\nconsole.log('üîó Backend URL:', API_BASE_URL); // Debug log\n\n// SIGN UP\nexport const signUp = ({\n  firstName,\n  lastName,\n  email,\n  password\n}) => {\n  const attributeList = [new CognitoUserAttribute({\n    Name: 'email',\n    Value: email\n  }), new CognitoUserAttribute({\n    Name: 'given_name',\n    Value: firstName\n  }), new CognitoUserAttribute({\n    Name: 'family_name',\n    Value: lastName\n  })];\n  return new Promise((resolve, reject) => {\n    userPool.signUp(email, password, attributeList, null, (err, result) => {\n      if (err) return reject({\n        success: false,\n        message: err.message\n      });\n      resolve({\n        success: true,\n        user: result.user\n      });\n    });\n  });\n};\n\n// SIGN IN\nexport const signIn = ({\n  email,\n  password\n}) => {\n  const user = new CognitoUser({\n    Username: email,\n    Pool: userPool\n  });\n  const authDetails = new AuthenticationDetails({\n    Username: email,\n    Password: password\n  });\n  return new Promise((resolve, reject) => {\n    user.authenticateUser(authDetails, {\n      onSuccess: result => {\n        const token = result.getIdToken().getJwtToken();\n        resolve({\n          success: true,\n          user: email,\n          token\n        });\n      },\n      onFailure: err => {\n        reject({\n          success: false,\n          message: err.message\n        });\n      }\n    });\n  });\n};\n\n// CONFIRM SIGN UP\nexport const confirmSignUp = (email, code) => {\n  const user = new CognitoUser({\n    Username: email,\n    Pool: userPool\n  });\n  return new Promise((resolve, reject) => {\n    user.confirmRegistration(code, true, (err, result) => {\n      if (err) return reject({\n        success: false,\n        message: err.message\n      });\n      resolve({\n        success: true,\n        message: result\n      });\n    });\n  });\n};\n\n// RESEND CONFIRMATION CODE\nexport const resendConfirmationCode = email => {\n  const user = new CognitoUser({\n    Username: email,\n    Pool: userPool\n  });\n  return new Promise((resolve, reject) => {\n    user.resendConfirmationCode((err, result) => {\n      if (err) return reject({\n        success: false,\n        message: err.message\n      });\n      resolve({\n        success: true,\n        message: result\n      });\n    });\n  });\n};\n\n// ‚úÖ FIXED: Generate Diet Plan (Updated to work with your existing backend)\nexport const generateDietPlan = async payload => {\n  try {\n    console.log('üöÄ Calling API:', `${API_BASE_URL}/api/generate-diet-plan`);\n    console.log('üì§ Payload:', payload);\n    const res = await fetch(`${API_BASE_URL}/api/generate-diet-plan`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    console.log('üì• Response status:', res.status);\n    const data = await res.json();\n    console.log('üì• Response data:', data);\n    if (!res.ok || !data.success) {\n      return {\n        success: false,\n        message: data.message || 'Failed to generate diet plan.'\n      };\n    }\n    return {\n      success: true,\n      plan: data.plan\n    };\n  } catch (err) {\n    console.error('‚ùå API Error:', err);\n    return {\n      success: false,\n      message: err.message || 'Failed to generate diet plan.'\n    };\n  }\n};\n\n// ‚úÖ FIXED: Get Diet Plan History (Updated to work with your existing backend)\nexport const getDietPlanHistory = async email => {\n  try {\n    console.log('üöÄ Fetching history for:', email);\n    const res = await fetch(`${API_BASE_URL}/api/diet-history/${encodeURIComponent(email)}`, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('üì• History response status:', res.status);\n    const data = await res.json();\n    console.log('üì• History data:', data);\n    if (!res.ok || !data.success) {\n      return {\n        success: false,\n        message: data.message || 'Failed to fetch history.'\n      };\n    }\n    return {\n      success: true,\n      history: data.history\n    };\n  } catch (err) {\n    console.error('‚ùå History API Error:', err);\n    return {\n      success: false,\n      message: err.message || 'Failed to fetch history.'\n    };\n  }\n};","map":{"version":3,"names":["CognitoUser","CognitoUserAttribute","AuthenticationDetails","userPool","API_BASE_URL","process","env","REACT_APP_BACKEND_URL","console","log","signUp","firstName","lastName","email","password","attributeList","Name","Value","Promise","resolve","reject","err","result","success","message","user","signIn","Username","Pool","authDetails","Password","authenticateUser","onSuccess","token","getIdToken","getJwtToken","onFailure","confirmSignUp","code","confirmRegistration","resendConfirmationCode","generateDietPlan","payload","res","fetch","method","headers","body","JSON","stringify","status","data","json","ok","plan","error","getDietPlanHistory","encodeURIComponent","history"],"sources":["E:/FitAI (1)/FitAI/src/api/backendApi.js"],"sourcesContent":["import {\n  CognitoUser,\n  CognitoUserAttribute,\n  AuthenticationDetails,\n} from 'amazon-cognito-identity-js';\nimport userPool from '../aws-config';\n\n// ‚úÖ Use environment variable for backend URL\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5001';\n\nconsole.log('üîó Backend URL:', API_BASE_URL); // Debug log\n\n// SIGN UP\nexport const signUp = ({ firstName, lastName, email, password }) => {\n  const attributeList = [\n    new CognitoUserAttribute({ Name: 'email', Value: email }),\n    new CognitoUserAttribute({ Name: 'given_name', Value: firstName }),\n    new CognitoUserAttribute({ Name: 'family_name', Value: lastName }),\n  ];\n\n  return new Promise((resolve, reject) => {\n    userPool.signUp(email, password, attributeList, null, (err, result) => {\n      if (err) return reject({ success: false, message: err.message });\n      resolve({ success: true, user: result.user });\n    });\n  });\n};\n\n// SIGN IN\nexport const signIn = ({ email, password }) => {\n  const user = new CognitoUser({ Username: email, Pool: userPool });\n  const authDetails = new AuthenticationDetails({ Username: email, Password: password });\n\n  return new Promise((resolve, reject) => {\n    user.authenticateUser(authDetails, {\n      onSuccess: (result) => {\n        const token = result.getIdToken().getJwtToken();\n        resolve({ success: true, user: email, token });\n      },\n      onFailure: (err) => {\n        reject({ success: false, message: err.message });\n      },\n    });\n  });\n};\n\n// CONFIRM SIGN UP\nexport const confirmSignUp = (email, code) => {\n  const user = new CognitoUser({ Username: email, Pool: userPool });\n\n  return new Promise((resolve, reject) => {\n    user.confirmRegistration(code, true, (err, result) => {\n      if (err) return reject({ success: false, message: err.message });\n      resolve({ success: true, message: result });\n    });\n  });\n};\n\n// RESEND CONFIRMATION CODE\nexport const resendConfirmationCode = (email) => {\n  const user = new CognitoUser({ Username: email, Pool: userPool });\n\n  return new Promise((resolve, reject) => {\n    user.resendConfirmationCode((err, result) => {\n      if (err) return reject({ success: false, message: err.message });\n      resolve({ success: true, message: result });\n    });\n  });\n};\n\n// ‚úÖ FIXED: Generate Diet Plan (Updated to work with your existing backend)\nexport const generateDietPlan = async (payload) => {\n  try {\n    console.log('üöÄ Calling API:', `${API_BASE_URL}/api/generate-diet-plan`);\n    console.log('üì§ Payload:', payload);\n\n    const res = await fetch(`${API_BASE_URL}/api/generate-diet-plan`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(payload),\n    });\n\n    console.log('üì• Response status:', res.status);\n\n    const data = await res.json();\n    console.log('üì• Response data:', data);\n\n    if (!res.ok || !data.success) {\n      return { success: false, message: data.message || 'Failed to generate diet plan.' };\n    }\n\n    return { success: true, plan: data.plan };\n  } catch (err) {\n    console.error('‚ùå API Error:', err);\n    return { success: false, message: err.message || 'Failed to generate diet plan.' };\n  }\n};\n\n// ‚úÖ FIXED: Get Diet Plan History (Updated to work with your existing backend)\nexport const getDietPlanHistory = async (email) => {\n  try {\n    console.log('üöÄ Fetching history for:', email);\n    \n    const res = await fetch(`${API_BASE_URL}/api/diet-history/${encodeURIComponent(email)}`, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    console.log('üì• History response status:', res.status);\n\n    const data = await res.json();\n    console.log('üì• History data:', data);\n\n    if (!res.ok || !data.success) {\n      return { success: false, message: data.message || 'Failed to fetch history.' };\n    }\n\n    return { success: true, history: data.history };\n  } catch (err) {\n    console.error('‚ùå History API Error:', err);\n    return { success: false, message: err.message || 'Failed to fetch history.' };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}